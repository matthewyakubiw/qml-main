name: Deploy Website
on:
  workflow_run:
    workflows:
      - Build Website
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-20.04
    if: github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.conclusion == 'success'
    steps:
      - name: Download PR Info
        uses: actions/github-script@v6
        with:
          script: |
            let artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id
            });
            let prArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == 'pr_info.zip'
            })[0];
            let download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: prArtifact.id,
              archive_format: 'zip'
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/pr_info.zip`, Buffer.from(download.data));

      - name: Unpack PR Info
        run: |
          unzip pr_info.zip

      - name: Read PR Info
        id: read_pr_info
        uses: actions/github-script@v6
        with:
          script: |
            let fs = require('fs');
            const prData = fs.readFileSync('pr_info.json');
            return JSON.parse(prData);

      - name: Parse PR Info
        id: pr_info
        run: |
          echo "::set-output name=pr_id::$(echo '${{ steps.read_pr_info.outputs.result }}' | jq '.id')"

      - name: Cache PR Info
        id: cache_pr
        uses: actions/cache@v3
        with:
          path: pr_info.json
          key: pr-${{ steps.pr_info.outputs.pr_id }}

      - name: Download HTML
        uses: actions/github-script@v6
        with:
          script: |
            let fs = require('fs');
            let artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id
            });
            let htmlArtifacts = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name.startsWith('html-')
            });
            for (const artifact of htmlArtifacts) {
              let download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
                archive_format: 'zip'
              });
              fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/${artifact.name}`, Buffer.from(download.data));
            }

      - name: Unpack HTML
        run: |
          mkdir -p website/demos
          
          # Unzip the first archive as it contains all non demo pages
          unzip -o -d website html-1.zip
          rm html-1.zip
          
          # Unzip all remaining demos
          for f in html-*.zip; do
            unzip -o -d website/demos $f
          done

      - name: Upload HTML
        env:
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run:
          aws s3 sync website s3://${{ secrets.AWS_S3_BUCKET_ID }}/pr_builds/${{ steps.pr_info.outputs.pr_id }}/ --delete

      - name: Comment on PR
        if: steps.cache_pr.outputs.cache-hit != 'true'
        uses: actions/github-script@v6
        with:
          script: |
            let fs = require('fs');
            let prNumber = ${{ steps.pr_info.outputs.pr_id }};
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: 'Thank you for the PR!'
            });
